{"version":3,"sources":["encodeSvg.js","Maker/Maker.js","App.js","serviceWorker.js","index.js"],"names":["getSvg","value","escaped","data","replace","encodeURIComponent","encodeSVG","indexOf","addNameSpace","Maker","useState","background","setBackground","firstColor","setFirstColor","secondColor","setSecondColor","useEffect","src","document","querySelector","setAttribute","style","className","width","height","viewBox","text-anchor","x","y","font-family","font-size","onSubmit","e","preventDefault","type","name","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAAO,SAASA,EAAOC,GACrB,IACMC,EAWR,SAAmBC,GAKjBA,GADAA,GAFAA,EAAOA,EAAKC,QAAQ,KAAb,MAEKA,QAAQ,YAAb,OACKA,QAAQ,UAAb,KAMP,OAAOD,EAAKC,QAFI,2BAEaC,oBAtBbC,CAIlB,SAAsBH,GAChBA,EAAKI,QAAL,8BAA6C,IAC/CJ,EAAOA,EAAKC,QAAQ,QAAb,4CAET,OAAOD,EATYK,CAAaP,IAEhC,MAAM,sBAAN,OAA6BC,G,MCCxB,SAASO,IAAS,IAAD,EACcC,mBAAS,SADvB,mBACfC,EADe,KACHC,EADG,OAEcF,mBAAS,IAFvB,mBAEfG,EAFe,KAEHC,EAFG,OAGgBJ,mBAAS,IAHzB,mBAGfK,EAHe,KAGFC,EAHE,KAKtBC,qBAAU,WACR,IAAMC,EAAMlB,EAAO,kLAAD,OAMRa,GAAc,QANN,kFASRE,GAAe,QATP,oKAiBlBI,SAASC,cAAc,YAAYC,aAAa,OAAQH,KACvD,CAACP,IAOJ,IAAMW,EAAQ,CACZX,cAGF,OACE,yBAAKY,UAAU,iBAAiBD,MAAOA,GACrC,yBAAKC,UAAU,eACb,yBAAKC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,eACpC,0BACEC,cAAY,SACZC,EAAE,IACFC,EAAE,KACFC,cAAY,kBACZC,YAAU,MALZ,oBAWJ,0BAAMR,UAAU,cAAcS,SAxBlC,SAAsBC,GACpBA,EAAEC,iBACFtB,EAAc,mBAAD,OAAoBC,EAApB,aAAmCE,EAAnC,QAuBT,2BAAOQ,UAAU,mBAAjB,OAEE,2BACEY,KAAK,OACLC,KAAK,qBACLC,YAAY,iBACZpC,MAAOY,EACPU,UAAU,qBACVe,SAAU,SAACL,GAAD,OAAOnB,EAAcmB,EAAEM,OAAOtC,WAG5C,2BAAOsB,UAAU,sBAAjB,UAEE,2BACEY,KAAK,OACLC,KAAK,sBACLC,YAAY,8BACZpC,MAAOc,EACPQ,UAAU,sBACVe,SAAU,SAACL,GAAD,OAAOjB,EAAeiB,EAAEM,OAAOtC,WAG7C,4BAAQsB,UAAU,gBAAgBY,KAAK,UAAvC,QCjEOK,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAACd,EAAD,QCKcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAAS8B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b3770663.chunk.js","sourcesContent":["export function getSvg(value) {\n  const namespaced = addNameSpace(value);\n  const escaped = encodeSVG(namespaced);\n  return `data:image/svg+xml,${escaped}`;\n}\n\nfunction addNameSpace(data) {\n  if (data.indexOf(`http://www.w3.org/2000/svg`) < 0) {\n    data = data.replace(/<svg/g, `<svg xmlns=\"http://www.w3.org/2000/svg\"`);\n  }\n  return data;\n}\n\nfunction encodeSVG(data) {\n  // Use single quotes instead of double to avoid encoding.\n  data = data.replace(/\"/g, `'`);\n\n  data = data.replace(/>\\s{1,}</g, `><`);\n  data = data.replace(/\\s{2,}/g, ` `);\n\n  // Using encodeURIComponent() as replacement function\n  // allows to keep result code readable\n  const symbols = /[\\r\\n%#()<>?[\\\\\\]^`{|}]/g;\n\n  return data.replace(symbols, encodeURIComponent);\n}\n","import React, { useState, useEffect } from \"react\";\nimport { getSvg } from \"../encodeSvg\";\nimport \"./maker.css\";\n\nexport function Maker() {\n  const [background, setBackground] = useState(\"white\");\n  const [firstColor, setFirstColor] = useState(\"\");\n  const [secondColor, setSecondColor] = useState(\"\");\n\n  useEffect(() => {\n    const src = getSvg(\n      `\n      <svg width=\"16\" height=\"16\">\n        <defs>\n          <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" style=\"stop-color:${\n              firstColor || \"white\"\n            };stop-opacity:1\" />\n            <stop offset=\"100%\" style=\"stop-color:${\n              secondColor || \"white\"\n            };stop-opacity:1\" />\n          </linearGradient>\n        </defs>\n        <rect x=\"0\" y=\"0\" width=\"16\" height=\"16\" fill=\"url(#grad1)\" />\n      </svg>\n      `\n    );\n    document.querySelector(\"#favicon\").setAttribute(\"href\", src);\n  }, [background]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    setBackground(`linear-gradient(${firstColor}, ${secondColor})`);\n  }\n\n  const style = {\n    background,\n  };\n\n  return (\n    <div className='maker__wrapper' style={style}>\n      <div className='maker__logo'>\n        <svg width='700' height='300' viewBox='0 0 100 100'>\n          <text\n            text-anchor='middle'\n            x='5'\n            y='10'\n            font-family='Times New Roman'\n            font-size='14'\n          >\n            GRADIENT MAKER\n          </text>\n        </svg>\n      </div>\n      <form className='maker__form' onSubmit={handleSubmit}>\n        <label className='maker__topLabel'>\n          top:\n          <input\n            type='text'\n            name='maker__first-color'\n            placeholder='type the color'\n            value={firstColor}\n            className='maker__first-color'\n            onChange={(e) => setFirstColor(e.target.value)}\n          ></input>\n        </label>\n        <label className='maker__bottomLabel'>\n          bottom:\n          <input\n            type='text'\n            name='maker__second-color'\n            placeholder='for example #b1368a or pink'\n            value={secondColor}\n            className='maker__second-color'\n            onChange={(e) => setSecondColor(e.target.value)}\n          ></input>\n        </label>\n        <button className='maker__button' type='submit'>\n          go\n        </button>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Maker } from \"./Maker/Maker\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Maker />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}